/************************* creación del proyecto  ********************/
ng new proyectoSistemaEncuestas

/************************* Instalacion Paquetes ********************/
npm i ajv-keywords
npm i ajv
npm i jquery
npm i @popperjs/core
npm i bootstrap
npm i @fortawesome/fontawesome-free
npm i ngx-bootstrap
npm i ngx-toastr
npm i ngx-pagination
npm i js-sha512
npm i jwt-decode


/***************** Estilos y Scripts (Angular.json) ************/
            "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "node_modules/@fortawesome/fontawesome-free/css/all.css",
              "node_modules/ngx-toastr/toastr.css",
              "src/styles.css"
            ],
            "scripts": [
              "node_modules/jquery/dist/jquery.min.js",
              "node_modules/@popperjs/core/dist/umd/popper.min.js",
              "node_modules/bootstrap/dist/js/bootstrap.min.js"
            ]

/************* Configurar puertos **************/

Archivo angular.json, buscar "serve"
            "production": {
              "browserTarget": "proyecto07:build:production",
              "port":8090
            },
            "development": {
              "browserTarget": "proyecto07:build:development",
              "port":8087
            }

/************* Hagamos la estructura del proyecto Modulos **************/

ng g m modulos/publico/acceso
ng g m modulos/publico/acceso/acceso-routing --flat --module=acceso

ng g m modulos/privado/usuario
ng g m modulos/privado/usuario/usuario-routing --flat --module=usuario

ng g m modulos/privado/rol
ng g m modulos/privado/rol/rol-routing --flat --module=rol

ng g m modulos/privado/encuestas
ng g m modulos/privado/encuestas/encuestas-routing --flat --module=encuestas

ng g m modulos/contenedor

/************* componentes **************/

ng g c modulos/contenedor/landscape/contenedorLand --skip-tests=true
ng g c modulos/contenedor/landscape/inicioLand --skip-tests=true
ng g c modulos/contenedor/landscape/errorLand --skip-tests=true

ng g c modulos/contenedor/dashboard/contenedorDash --skip-tests=true
ng g c modulos/contenedor/dashboard/cabeceraDash --skip-tests=true
ng g c modulos/contenedor/dashboard/cuerpoDash --skip-tests=true
ng g c modulos/contenedor/dashboard/inicioDash --skip-tests=true
ng g c modulos/contenedor/dashboard/errorDash --skip-tests=true
ng g c modulos/contenedor/dashboard/sideBarDash --skip-tests=true
ng g c modulos/contenedor/dashboard/navbar-sidebar --skip-tests=true

ng g c modulos/publico/acceso/inicio --skip-tests=true
ng g c modulos/publico/acceso/registro --skip-tests=true

ng g c modulos/privado/usuario/usuCrear --skip-tests=true
ng g c modulos/privado/usuario/usuEditar --skip-tests=true
ng g c modulos/privado/usuario/usuListar --skip-tests=true
ng g c modulos/privado/usuario/usuDatos --skip-tests=true

ng g c modulos/privado/rol/rolCrear --skip-tests=true
ng g c modulos/privado/rol/rolEditar --skip-tests=true
ng g c modulos/privado/rol/rolListar --skip-tests=true

ng g c modulos/privado/encuestas/encuestaCrear --skip-tests=true
ng g c modulos/privado/encuestas/encuestaEditar --skip-tests=true
ng g c modulos/privado/encuestas/encuestaListar --skip-tests=true


/************* Utilidades **************/

ng g enum utilidades/rutas/landscapeRutas
ng g enum utilidades/rutas/dashboardRutas
ng g enum utilidades/dominios/uris
ng g enum utilidades/dominios/sesiones
ng g enum utilidades/dominios/tipoDocumento
ng g enum utilidades/observadores/tipoAny

ng g enum utilidades/mensajes/toas --type=func

/************* Modelos **************/

ng g class modelos/acceso --skip-tests=true
ng g class modelos/respuestaAcceso --skip-tests=true
ng g class modelos/registro --skip-tests=true
ng g class modelos/rol --skip-tests=true
ng g class modelos/usuarios --skip-tests=true
ng g class modelos/encuestas --skip-tests=true

/************* Servicios **************/

ng g s servicios/acceso --skip-tests=true
ng g s servicios/registro --skip-tests=true
ng g s servicios/rol --skip-tests=true
ng g s servicios/usuario --skip-tests=true


/************* Guard **************/
ng g guard vigilante --skip-tests=true

/************* Interceptor **************/
ng g interceptor token --skip-tests=true

/************* Inclusión de Modulos (src\app\app.module.ts)**************/
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import {HttpClientModule} from '@angular/common/http';
import { BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

import { AppComponent } from './app.component';
import { AppRoutingModule } from './app-routing.module';

import { ToastrModule } from 'ngx-toastr';
import { ModalModule } from 'ngx-bootstrap/modal';
import { NgxPaginationModule } from 'ngx-pagination';

import {ContenedorModule} from './modulos/contenedor/contenedor.module';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,

    FormsModule,
    ModalModule.forRoot(),
    ToastrModule.forRoot(),
    BrowserAnimationsModule,
    NgxPaginationModule,
    HttpClientModule,

    ContenedorModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

/*************************** plantilla por defecto ***********************/
<router-outlet></router-outlet>

/*************************** Funcion de mensajes (toas.func.ts) ***********************/
import { ToastrService } from 'ngx-toastr';

export function mostrarMensaje(tipo: string, textoMensaje: string,  alerta: string,  toastr: ToastrService): void {
  const PARAMETROS = {
    closeButton: true,
    enableHtml: true,
    progressBar: true,
    positionClass: 'toast-bottom-right',
    timeOut: 6000,
  };

  switch (tipo) {
    case 'success':
      toastr.success(textoMensaje, alerta, PARAMETROS);
      break;
    case 'info':
      toastr.info(textoMensaje, alerta, PARAMETROS);
      break;
    case 'error':
      toastr.error(textoMensaje, alerta, PARAMETROS);
      break;
    case 'warning':
      toastr.warning(textoMensaje, alerta, PARAMETROS);
      break;
    default:
      toastr.clear(0);
      break;
  }
}

/*************************** El observador ANY ***********************/
import {Observer} from 'rxjs';

export const observadorAny: Observer<any> ={
  next(respuesta){
    console.log(respuesta);
  },
  error(miError){
    console.log(miError);
  },
  complete(){
    console.log('Completo todo');
  }
}



/*************************** On tan las APIS (Uris)***********************/
export const API_URL = 'http://localhost:3210/';

// Servicios públicos
export const API_INICIO = API_URL + 'api/public/access/login';
export const API_REGISTRO = API_URL + 'api/public/access/register';

// Servicios privados
export const API_USUARIO = API_URL + 'api/private/user/getAll';

/*************************** Variables del TOKEN (sesiones) ***********************/
export const TOKEN_SISTEMA = 'TOKENCITO_FULLSTACKCITO';
export const FOTO_SISTEMA = 'FOTICO_FULLSTACKCITO';


/*************************** Servicio Acceso (accesoService.ts) ***********************/
import { Observable } from 'rxjs';
import { Router } from '@angular/router';
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

import { Acceso } from '../modelos/acceso';
import * as urls from '../utilidades/dominios/uris';
import { RespuestaAcceso } from '../modelos/respuesta-acceso';
import { TOKEN_SISTEMA } from '../utilidades/dominios/sesiones';

@Injectable({
  providedIn: 'root',
})
export class AccesoService {
  public objAcceso: Acceso;
  public urlInicioSesion: string;

  constructor(private http: HttpClient, private router: Router) {
    this.objAcceso = this.inicializarAcceso();
    this.urlInicioSesion = urls.API_INICIO;
  }

  // Métodos obligatorios
  public inicializarAcceso(): Acceso {
    return new Acceso(0, '', '');
  }

  public obtenerAcceso(): Acceso {
    return this.objAcceso;
  }

  // Lógica de negocio
  public salir(): void {
    // Matar la sesión
    // Redirigir el usuario al componente deseado
  }

  public obtenerToken(): string {
    return localStorage.getItem(TOKEN_SISTEMA) as string;
  }

  public iniciarSesion(miAcceso: Acceso): Observable<RespuestaAcceso> {
    return this.http.post<RespuestaAcceso>(this.urlInicioSesion, miAcceso);
  }
}

/***************** RUTEO LAZY modulo acceso (AccesoRoutingModule.ts) **************/
import { RouterModule, Routes } from '@angular/router';
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { InicioComponent } from './inicio/inicio.component';
import { RegistroComponent } from './registro/registro.component';
import { ErrorLandComponent } from '../../contenedor/landscape/error-land/error-land.component';

const routes: Routes =[
  {path: 'login', component: InicioComponent},
  {path: 'register', component: RegistroComponent},

  {path: '', redirectTo: 'login', pathMatch: 'full'},
  {path: '**', component: ErrorLandComponent}
];

@NgModule({
  declarations: [],
  imports: [
    CommonModule,
    RouterModule.forChild(routes)
  ],
  exports: [RouterModule]
})
export class AccesoRoutingModule { }

/***************** RUTEO LAZY landscape en utilidades (landscapeRutas.ts) **************/
import { Routes } from '@angular/router';
import { ErrorLandComponent } from 'src/app/modulos/contenedor/landscape/error-land/error-land.component';

export const RUTAS_LANDSCAPE: Routes = [
  {path: 'public', loadChildren:
  ()=> import('../../modulos/publico/acceso/acceso.module').
  then(m =>m.AccesoModule)},

  {path: '', redirectTo: 'public', pathMatch: 'full'},
  {path: '**', component: ErrorLandComponent}
];


// ***** Ya estamos listos para usar foRmularios y plantillAS *****
// src\app\modulos\publico\acceso\acceso.module.ts
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';

import { AccesoRoutingModule } from './acceso-routing.module';

import { InicioComponent } from './inicio/inicio.component';
import { RegistroComponent } from './registro/registro.component';

@NgModule({
  declarations: [
    InicioComponent,
    RegistroComponent
  ],
  imports: [
    CommonModule,
    AccesoRoutingModule,
    FormsModule,
    RouterModule
  ]
})
export class AccesoModule { }

/*************************** Te faltaban las rutas del principal!!! (app-routing.module.ts) ***********************/
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

import { RUTAS_LANDSCAPE } from './utilidades/rutas/landscape-rutas';
import { ContenedorLandComponent } from './modulos/contenedor/landscape/contenedor-land/contenedor-land.component';
import { ErrorLandComponent } from './modulos/contenedor/landscape/error-land/error-land.component';

const routes: Routes = [
{path: 'land', component: ContenedorLandComponent, children: RUTAS_LANDSCAPE},

{path: '', redirectTo: 'land', pathMatch: 'full'},
{path: '**', component: ErrorLandComponent}
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }


/*************** Tienes que configurar el modulo de los contenedores***********************/

import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';

import { ErrorLandComponent } from './landscape/error-land/error-land.component';
import { InicioLandComponent } from './landscape/inicio-land/inicio-land.component';
import { ContenedorLandComponent } from './landscape/contenedor-land/contenedor-land.component';

import { ContenedorDashComponent } from './dashboard/contenedor-dash/contenedor-dash.component';
import { CabeceraDashComponent } from './dashboard/cabecera-dash/cabecera-dash.component';
import { CuerpoDashComponent } from './dashboard/cuerpo-dash/cuerpo-dash.component';
import { InicioDashComponent } from './dashboard/inicio-dash/inicio-dash.component';
import { ErrorDashComponent } from './dashboard/error-dash/error-dash.component';

@NgModule({
  declarations: [
    ContenedorLandComponent,
    InicioLandComponent,
    ErrorLandComponent,
    ContenedorDashComponent,
    CabeceraDashComponent,
    CuerpoDashComponent,
    InicioDashComponent,
    ErrorDashComponent
  ],
  imports: [
    CommonModule,
    RouterModule
  ],
  exports:[
    ContenedorLandComponent,
    ContenedorDashComponent
  ]
})
export class ContenedorModule { }



